substitutions:
  timezone: Asia/Taipei
  default_city_name: 新北市
  default_town_name: 中和區

external_components:
  - source: components

packages:
  debug: !include debug.yaml

logger:
  level: DEBUG

esphome:
  name: town-forecast-example-dual
  friendly_name: Town Forecast Example (Dual)

esp32:
  board: esp32-c3-devkitm-1

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

api:

globals:
  - id: initial
    type: bool
    initial_value: "false"

  - id: town_forecast_3d_init
    type: bool
    initial_value: "false"

  - id: town_forecast_7d_init
    type: bool
    initial_value: "false"

time:
  - platform: sntp
    id: esp_time
    timezone: $timezone
    servers:
      - time1.google.com
      - time2.google.com
      - time3.google.com
    on_time:
      - cron: "0 /30 * * * *"
        then:
          if:
            condition:
              - wifi.connected:
              - time.has_time:
            then:
              - script.execute: update_forecast_3d
      - cron: "0 0 6,18 * * *"
        then:
          if:
            condition:
              - wifi.connected:
              - time.has_time:
            then:
              - script.execute: update_forecast_7d
    on_time_sync:
      then:
        - lambda: |-
            if (!id(initial)) {
              id(update_forecast_all).execute();
              id(initial) = true;
            }

cwa_town_forecast:
  - api_key: !secret cwa_api_key
    id: town_forecast_3d
    city_name: !lambda return id(city_name).state;
    town_name: !lambda return id(town_name).state;
    mode: 3-DAYS
    time_to: 1d
    data_access: true
    on_data_change:
      - lambda: |-
          id(town_forecast_3d_init) = true;

  - api_key: !secret cwa_api_key
    id: town_forecast_7d
    city_name: !lambda return id(city_name).state;
    town_name: !lambda return id(town_name).state;
    mode: 7-DAYS
    data_access: true
    on_data_change:
      - lambda: |-
          id(town_forecast_7d_init) = true;

select:
  - platform: template
    id: city_name
    name: City Name
    restore_value: true
    options:
      - "宜蘭縣"
      - "花蓮縣"
      - "臺東縣"
      - "澎湖縣"
      - "金門縣"
      - "連江縣"
      - "臺北市"
      - "新北市"
      - "桃園市"
      - "臺中市"
      - "臺南市"
      - "高雄市"
      - "基隆市"
      - "新竹縣"
      - "新竹市"
      - "苗栗縣"
      - "彰化縣"
      - "南投縣"
      - "雲林縣"
      - "嘉義縣"
      - "嘉義市"
      - "屏東縣"
    initial_option: $default_city_name
    optimistic: true
    entity_category: "config"

text:
  - platform: template
    id: town_name
    name: "Town Name"
    optimistic: true
    min_length: 0
    max_length: 20
    mode: text
    restore_value: true
    initial_value: $default_town_name
    entity_category: "config"

button:
  - platform: template
    name: "Update Forecast 3D"
    on_press:
      - script.execute: update_forecast_3d

  - platform: template
    name: "Update Forecast 7D"
    on_press:
      - script.execute: update_forecast_7d

  - platform: template
    name: "Update Forecast"
    on_press:
      - script.execute: update_forecast_all

  - platform: template
    name: "Dump Forecast 3D Data"
    on_press:
      - lambda: |-
          id(town_forecast_3d)->get_data().dump();

  - platform: template
    name: "Dump Forecast 7D Data"
    on_press:
      - lambda: |-
          id(town_forecast_7d)->get_data().dump();

  - platform: template
    name: "Analyze Forecast Data"
    on_press:
      - script.execute: analyze_data

sensor:
  - platform: cwa_town_forecast
    mode: 3-DAYS
    cwa_town_forecast_id: town_forecast_3d
    temperature:
      name: "3D Temperature"
    dew_point:
      name: "3D Dew Point"
    apparent_temperature:
      name: "3D Apparent Temperature"
    relative_humidity:
      name: "3D Relative Humidity"
    wind_speed:
      name: "3D Wind Speed"
    probability_of_precipitation:
      name: "3D Probability Of Precipitation (3H)"

  - platform: cwa_town_forecast
    mode: 7-DAYS
    cwa_town_forecast_id: town_forecast_7d
    temperature:
      name: "7D Avg Temperature"
    max_temperature:
      name: "7D Max Temperature"
    min_temperature:
      name: "7D Min Temperature"
    dew_point:
      name: "7D Avg Dew Point"
    relative_humidity:
      name: "7D Relative Humidity"
    max_apparent_temperature:
      name: "7D Max Apparent Temperature"
    min_apparent_temperature:
      name: "7D Min Apparent Temperature"
    wind_speed:
      name: "7D Wind Speed"
    probability_of_precipitation:
      name: "7D Probability Of Precipitation (12H)"
    uv_index:
      name: "7D UV Index"

text_sensor:
  - platform: cwa_town_forecast
    mode: 3-DAYS
    cwa_town_forecast_id: town_forecast_3d
    comfort_index:
      name: "3D Comfort Index"
    comfort_index_description:
      name: "3D Comfort Index Description"
    weather:
      name: "3D Weather"
    weather_code:
      name: "3D Weather Code"
    weather_description:
      name: "3D Weather Description"
    weather_icon:
      name: "3D Weather Icon"
    wind_direction:
      name: "3D Wind Direction"
    beaufort_scale:
      name: "3D Beaufort Scale"
    city:
      name: "3D City"
    town:
      name: "3D Town"
    last_updated:
      name: "3D Last Updated"
    last_success:
      name: "3D Last Success"

  - platform: cwa_town_forecast
    mode: 7-DAYS
    cwa_town_forecast_id: town_forecast_7d
    max_comfort_index:
      name: "7D Max Comfort Index"
    min_comfort_index:
      name: "7D Min Comfort Index"
    max_comfort_index_description:
      name: "7D Max Comfort Index Description"
    min_comfort_index_description:
      name: "7D Min Comfort Index Description"
    wind_direction:
      name: "7D Wind Direction"
    beaufort_scale:
      name: "7D Beaufort Scale"
    weather:
      name: "7D Weather"
    weather_code:
      name: "7D Weather Code"
    weather_icon:
      name: "7D Weather Icon"
    uv_exposure_level:
      name: "7D UV Exposure Level"
    weather_description:
      name: "7D Weather Description"
    city:
      name: "7D City"
    town:
      name: "7D Town"
    last_updated:
      name: "7D Last Updated"
    last_success:
      name: "7D Last Success"

script:
  - id: update_forecast_3d
    then:
      - component.update: town_forecast_3d

  - id: update_forecast_7d
    then:
      - component.update: town_forecast_7d

  - id: update_forecast_all
    then:
      - script.execute: update_forecast_3d
      - script.wait: update_forecast_3d
      - script.execute: update_forecast_7d
      - script.wait: update_forecast_7d

  - id: analyze_data
    then:
      - lambda: |-
          using namespace cwa_town_forecast;
          if(!(id(town_forecast_3d_init) && id(town_forecast_7d_init))) {
            ESP_LOGW("forecast", "Forecast not initialized");
            return;
          }

          auto forecast_3d_data = id(town_forecast_3d).get_data();
          auto forecast_7d_data = id(town_forecast_7d).get_data();
          bool fallback = true;

          auto now = id(esp_time).now();
          if(!now.is_valid()){
            ESP_LOGW("forecast", "Current time is not valid");
            return;
          }

          ESP_LOGI("forecast", "Current time: %s", now.strftime("%Y-%m-%d %H:%M:%S").c_str());

          ESP_LOGI("forecast", "Current Forecast(Nearly 1-3 hours):");
          ESP_LOGI("forecast", "  LocationsName: %s", forecast_3d_data.locations_name.c_str());
          ESP_LOGI("forecast", "  LocationName: %s", forecast_3d_data.location_name.c_str());
          ESP_LOGI("forecast", "  Temperature: %s°C", forecast_3d_data.find_value(ElementValueKey::TEMPERATURE, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Dew Point: %s°C", forecast_3d_data.find_value(ElementValueKey::DEW_POINT, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Apparent Temperature: %s°C", forecast_3d_data.find_value(ElementValueKey::APPARENT_TEMPERATURE, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Comfort Index: %s", forecast_3d_data.find_value(ElementValueKey::COMFORT_INDEX, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Comfort Index Description: %s", forecast_3d_data.find_value(ElementValueKey::COMFORT_INDEX_DESCRIPTION, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Relative Humidity: %s%%", forecast_3d_data.find_value(ElementValueKey::RELATIVE_HUMIDITY, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Wind Direction: %s", forecast_3d_data.find_value(ElementValueKey::WIND_DIRECTION, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Wind Speed: %s m/s", forecast_3d_data.find_value(ElementValueKey::WIND_SPEED, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Beaufort Scale: %s", forecast_3d_data.find_value(ElementValueKey::BEAUFORT_SCALE, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Probability Of Precipitation: %s%%", forecast_3d_data.find_value(ElementValueKey::PROBABILITY_OF_PRECIPITATION, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Weather: %s", forecast_3d_data.find_value(ElementValueKey::WEATHER, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Weather Description: %s", forecast_3d_data.find_value(ElementValueKey::WEATHER_DESCRIPTION, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Weather Code: %s", forecast_3d_data.find_value(ElementValueKey::WEATHER_CODE, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Weather Icon: %s", forecast_3d_data.find_value(ElementValueKey::WEATHER_ICON, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "");

          ESP_LOGI("forecast", "Today's Forecast(From now until midnight):");
          std::tm start = mktm(now.year, now.month, now.day_of_month, 0, 0, 0);
          std::tm end = mktm(now.year, now.month, now.day_of_month, 23, 59, 59);
          auto min_max = forecast_3d_data.find_min_max_values(ElementValueKey::TEMPERATURE, start, end);
          ESP_LOGI("forecast", "  Temperature: %.0f-%.0f °C", min_max.first, min_max.second);
          min_max = forecast_3d_data.find_min_max_values(ElementValueKey::APPARENT_TEMPERATURE, start, end);
          ESP_LOGI("forecast", "  Apparent Temperature: %.0f-%.0f °C", min_max.first, min_max.second);
          min_max = forecast_3d_data.find_min_max_values(ElementValueKey::RELATIVE_HUMIDITY, start, end);
          ESP_LOGI("forecast", "  Relative Humidity: %.0f-%.0f %%", min_max.first, min_max.second);
          ESP_LOGI("forecast", "");

          // see https://www.cwa.gov.tw/V8/C/W/Town/Town.html?TID=6500300
          ESP_LOGI("forecast", "Current Forecast(Day/Night):");
          ESP_LOGI("forecast", "  LocationsName: %s", forecast_7d_data.locations_name.c_str());
          ESP_LOGI("forecast", "  LocationName: %s", forecast_7d_data.location_name.c_str());
          ESP_LOGI("forecast", "  Avg Temperature: %s°C", forecast_7d_data.find_value(ElementValueKey::TEMPERATURE, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Avg Dew Point: %s°C", forecast_7d_data.find_value(ElementValueKey::DEW_POINT, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Avg Relative Humidity: %s%%", forecast_7d_data.find_value(ElementValueKey::RELATIVE_HUMIDITY, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Max Temperature: %s°C", forecast_7d_data.find_value(ElementValueKey::MAX_TEMPERATURE, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Min Temperature: %s°C", forecast_7d_data.find_value(ElementValueKey::MIN_TEMPERATURE, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Max Apparent Temperature: %s°C", forecast_7d_data.find_value(ElementValueKey::MAX_APPARENT_TEMPERATURE, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Min Apparent Temperature: %s°C", forecast_7d_data.find_value(ElementValueKey::MIN_APPARENT_TEMPERATURE, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Max Comfort Index: %s", forecast_7d_data.find_value(ElementValueKey::MAX_COMFORT_INDEX, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Min Comfort Index: %s", forecast_7d_data.find_value(ElementValueKey::MIN_COMFORT_INDEX, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Max Comfort Index Description: %s", forecast_7d_data.find_value(ElementValueKey::MAX_COMFORT_INDEX_DESCRIPTION, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Min Comfort Index Description: %s", forecast_7d_data.find_value(ElementValueKey::MIN_COMFORT_INDEX_DESCRIPTION, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Probability Of Precipitation: %s%%", forecast_7d_data.find_value(ElementValueKey::PROBABILITY_OF_PRECIPITATION, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  UV Index: %s", forecast_7d_data.find_value(ElementValueKey::UV_INDEX, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  UV Exposure Level: %s", forecast_7d_data.find_value(ElementValueKey::UV_EXPOSURE_LEVEL, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Weather: %s", forecast_7d_data.find_value(ElementValueKey::WEATHER, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Weather Code: %s", forecast_7d_data.find_value(ElementValueKey::WEATHER_CODE, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Weather Icon: %s", forecast_7d_data.find_value(ElementValueKey::WEATHER_ICON, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Weather Description: %s", forecast_7d_data.find_value(ElementValueKey::WEATHER_DESCRIPTION, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Wind Direction: %s", forecast_7d_data.find_value(ElementValueKey::WIND_DIRECTION, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Wind Speed: %s m/s", forecast_7d_data.find_value(ElementValueKey::WIND_SPEED, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "  Beaufort Scale: %s", forecast_7d_data.find_value(ElementValueKey::BEAUFORT_SCALE, fallback, now.to_c_tm()).c_str());
          ESP_LOGI("forecast", "");

          // see https://www.cwa.gov.tw/V8/C/W/Town/Town.html?TID=6500300
          ESP_LOGI("forecast", "7-Day Forecast(Day/Night):");
          {
            const auto &record = forecast_7d_data;
            auto now_tm = now.to_c_tm();
            for (int d = 0; d < 7; ++d) {
              // noon entry
              std::tm noon = now_tm;
              noon.tm_mday += d;
              noon.tm_hour = 12; noon.tm_min = 0; noon.tm_sec = 0;
              std::mktime(&noon);
              auto esp_noon = tm_to_esptime(noon);
              auto date_str = esp_noon.strftime("%Y-%m-%d");
              auto weekday = esp_noon.strftime("%a");
              std::string min_val = record.find_value(ElementValueKey::MIN_TEMPERATURE, false, noon);
              std::string max_val = record.find_value(ElementValueKey::MAX_TEMPERATURE, false, noon);
              std::string icon = record.find_value(ElementValueKey::WEATHER_ICON, false, noon);
              std::string rain = record.find_value(ElementValueKey::PROBABILITY_OF_PRECIPITATION, false, noon);
              ESP_LOGI("forecast", "  %s %s %s: icon %s, rain %s%%, min %s°C, max %s°C",
                       date_str.c_str(),weekday.c_str(),  "(Day)  ", icon.c_str(), rain.c_str(), min_val.c_str(), max_val.c_str());

              // night entry
              std::tm night = now_tm;
              night.tm_mday += d;
              night.tm_hour = 21; night.tm_min = 0; night.tm_sec = 0;
              std::mktime(&night);
              auto esp_night = tm_to_esptime(night);
              std::string min_val2 = record.find_value(ElementValueKey::MIN_TEMPERATURE, false, night);
              std::string max_val2 = record.find_value(ElementValueKey::MAX_TEMPERATURE, false, night);
              std::string icon2 = record.find_value(ElementValueKey::WEATHER_ICON, false, night);
              std::string rain2 = record.find_value(ElementValueKey::PROBABILITY_OF_PRECIPITATION, false, night);
              ESP_LOGI("forecast", "  %s %s %s: icon %s, rain %s%%, min %s°C, max %s°C",
                       date_str.c_str(), weekday.c_str(), "(Night)",icon2.c_str(), rain2.c_str(), min_val2.c_str(), max_val2.c_str());
            }
          }





















